{
  "openapi": "3.0.3",
  "info": {
    "title": "Roxom Trading API",
    "description": "Real-time trading APIs for orders and account management",
    "version": "1.0.0",
    "contact": {
      "name": "Roxom Support",
      "email": "support@roxom.com"
    },
    "license": {
      "name": "Proprietary"
    }
  },
  "servers": [
    {
      "url": "https://api.roxom.com/api/v1",
      "description": "Production API"
    },
    {
      "url": "https://api.roxom.io/api/v1",
      "description": "Sandbox API for testing"
    }
  ],
  "paths": {
    "/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Place a new order",
        "operationId": "place_order_handler",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order placed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get order by ID",
        "operationId": "get_order_handler",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order ID to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/cancel": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Cancel an order",
        "operationId": "cancel_order_handler",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order ID to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiError": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Validation"
            ],
            "properties": {
              "Validation": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "NotFound"
            ],
            "properties": {
              "NotFound": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "OrderFailed"
            ],
            "properties": {
              "OrderFailed": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Internal"
            ],
            "properties": {
              "Internal": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CancelOrderResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "success"
            ],
            "properties": {
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "GetOrderResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string"
          },
          "instrument_type": {
            "$ref": "#/components/schemas/InstrumentType"
          },
          "account_id": {
            "type": "string"
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "tif": {
            "$ref": "#/components/schemas/TimeInForce"
          },
          "side": {
            "$ref": "#/components/schemas/OrderSide"
          },
          "qty": {
            "type": "integer",
            "format": "int64"
          },
          "px": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "trigger_px": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "client_order_id": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InstrumentType": {
        "type": "string",
        "enum": [
          "perpetual",
          "btc",
          "digital",
          "equity"
        ]
      },
      "OrderSide": {
        "type": "string",
        "enum": [
          "buy",
          "sell"
        ]
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "pendingsubmit",
          "waitingtrigger",
          "submitted",
          "pendingcancel",
          "partiallyfilled",
          "partiallyfilledcancelled",
          "filled",
          "cancelled",
          "rejected",
          "inactive"
        ]
      },
      "OrderType": {
        "type": "string",
        "enum": [
          "limit",
          "market",
          "stop",
          "stoplimit"
        ]
      },
      "PlaceOrderRequest": {
        "type": "object",
        "required": [
          "symbol",
          "instrument_type",
          "side",
          "_type",
          "qty"
        ],
        "properties": {
          "_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "cancel_at": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "client_order_id": {
            "type": "string",
            "nullable": true
          },
          "instrument_type": {
            "$ref": "#/components/schemas/InstrumentType"
          },
          "px": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "qty": {
            "type": "integer",
            "format": "int64"
          },
          "side": {
            "$ref": "#/components/schemas/OrderSide"
          },
          "symbol": {
            "type": "string"
          },
          "tif": {
            "$ref": "#/components/schemas/TimeInForce",
            "nullable": true
          },
          "trigger_px": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "PlaceOrderResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "order_id"
            ],
            "properties": {
              "order_id": {
                "type": "string"
              }
            }
          }
        }
      },
      "TimeInForce": {
        "type": "string",
        "enum": [
          "gtc",
          "gtd",
          "ioc"
        ]
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "orders",
      "description": "Order management endpoints"
    }
  ]
}